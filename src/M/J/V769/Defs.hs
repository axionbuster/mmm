{-# OPTIONS_GHC -Wno-missing-export-lists #-}

-- | Packet definitions for the V769 (Java 1.21.4) protocol.
--
-- WARNING: Much of this module was generated by AI under human guidance.
-- It is not guaranteed to be correct.
module M.J.V769.Defs where

import Control.DeepSeq
import Data.Bits
import Data.ByteString (ByteString)
import Data.Data
import Data.Fixed
import Data.Hashable
import Data.Int
import Data.Serde.QQ
import Data.Text (Text)
import Data.UUID.Types
import Data.Vector qualified as V
import Data.Word
import GHC.Generics
import Language.Haskell.TH.Syntax (Lift)
import Linear
import M.J.Chunk.Net
import M.J.Misc
import M.J.NBT
import M.J.Position
import M.J.TODO
import M.LEB
import M.Pack
import Prelude hiding (id, length, sequence)

-- | given in 1/8000 resolution
data SetEntityVelocityRes

-- | given in 1/8000 resolution
instance HasResolution SetEntityVelocityRes where
  resolution _ = 8000

-- sum types cannot be defined in serde just yet, so
-- we define them here

data ChatMode = CMEnabled | CMCommandsOnly | CMHidden
  deriving stock (Eq, Ord, Show, Read)
  deriving stock (Enum, Bounded, Generic, Data, Typeable, Lift)
  deriving anyclass (NFData, Hashable)

data ParticleStatus = PSAll | PSDecreased | PSMinimal
  deriving stock (Eq, Ord, Show, Read)
  deriving stock (Enum, Bounded, Generic, Data, Typeable, Lift)
  deriving anyclass (NFData, Hashable)

data FilterType = PassThrough | FullyFiltered | PartiallyFiltered
  deriving stock (Eq, Ord, Show, Read)
  deriving stock (Enum, Bounded, Generic, Data, Typeable, Lift)
  deriving anyclass (NFData, Hashable)

data BossBarColor = Pink | Blue | Red | Green | Yellow | Purple | White
  deriving stock (Eq, Ord, Show, Read)
  deriving stock (Enum, Bounded, Generic, Data, Typeable, Lift)
  deriving anyclass (NFData, Hashable)

[serde|
.derive
  Show Read Data Typeable

data StatusResponse
  jsonresponse :: Text

data StatusRequest

-- to define LoginSuccess, need to define 'Property' first
-- also, assume OverloadedRecordDot is enabled, as well as
-- DuplicateRecordFields and DisambiguateRecordFields, so that
-- multiple records can have the same field name

data LoginSuccess_Property
  name :: Text
  value :: Text
  signature :: Maybe Text

-- SetCompression shows the example of using a via clause
-- to define how to serialize/deserialize a field, without
-- leaking the implementation details of the serialization
-- format to the user

-- though we can use a newtype, because of an issue in deriving
-- Generic using DerivingVia, we can't use it here until
-- the ".no" feature (which disables deriving specific instances)
-- is implemented
data SetCompression
  getcompressionthreshold :: Int32 via VarInt

-- in the declaration below we use shadowing to borrow the
-- Pack and Unpack implementation through LEB Int32,
-- which is equal to VarInt

data LoginPluginRequest
  messageid :: Int32 via LEB Int32
  channel :: Text
  data_ :: ByteString via TakeRest -- if Coercible, ok

data LoginStart
  name :: Text
  uuid :: UUID

-- 'Identifier' isn't to be exposed to the user (yet);
-- I haven't made up my mind about that

data CookieRequestConfiguration
  key :: Text via Identifier

-- we don't ever use raw lists ([...]) for serialization/deserialization.
-- we use Vectors (V.Vector or VU.Vector)

data RegistryData
  regid :: Text via Identifier
  entries :: V.Vector RegistryData_Entry

data RegistryData_Entry
  id :: Text via Identifier
  data_ :: Maybe Tg -- NBT = Tg

-- some more complicated bits are shown here
-- sum types: we can't define sum types here yet, so
--  for now, assume they are defined elsewhere
-- EnumIndex i a: newtype over 'a' but uses integral type 'i' to
--  represent it. used for simple sum types
-- Bitwise i a: newtype over 'a', a product of booleans.
--  represents it as a bit set over the integral type 'i'.

data ClientInformationConfiguration
  locale :: Text
  viewdistance :: Int8
  chatmode :: ChatMode via EnumIndex VarInt ChatMode
  chatcolors :: Bool
  displayedskinparts :: DisplayedSkinParts via Bitwise Word8 DisplayedSkinParts
  mainhandright :: Bool
  enabletextfiltering :: Bool
  allowserverlistings :: Bool
  particlestatus :: ParticleStatus via EnumIndex VarInt ParticleStatus

data DisplayedSkinParts
  cape :: Bool
  jacket :: Bool
  leftsleeve :: Bool
  rightsleeve :: Bool
  leftpants :: Bool
  rightpants :: Bool
  hat :: Bool

-- Minecraft uses 'rotation' and 'orientation' interchangeably

data UpdateEntityRotation
  id :: Int32 via VarInt
  rotation :: V2 Int8 via V2 Int8Angle
  onground :: Bool

-- using dummy types: Slot (Data), Text Component (NBT/JSON), etc.
-- some shim types have been defined, so we can use them here

data CombatDeath
  id :: Int32 via VarInt
  message :: TextComponent

-- Basic handshaking/status packets
data HandshakePacket
  protocolversion :: Int32 via VarInt
  serveraddress :: Text 
  serverport :: Word16
  nextstate :: Int32 via VarInt

-- Login packets
data LoginDisconnect
  reason :: TextComponent

data EncryptionRequest
  serverid :: Text
  publickey :: ByteString
  verifytoken :: ByteString
  shouldauthenticate :: Bool

data LoginSuccess
  uuid :: UUID
  username :: Text
  properties :: V.Vector LoginSuccess_Property

data LoginPluginResponse
  messageid :: Int32 via VarInt
  successful :: Bool
  data_ :: Maybe ByteString

-- Play state packets
data BundleDelimiter -- empty packet

data SpawnEntity
  entityid :: Int32 via VarInt
  entityuuid :: UUID
  type_ :: Int32 via VarInt
  -- x :: Double
  -- y :: Double
  -- z :: Double
  position :: V3 Double
  rotation :: V2 Int8 via V2 Int8Angle
  data_ :: Int32 via VarInt
  velocity :: V3 Double via V3 (Fixed' Int16 SetEntityVelocityRes Double)

data BlockUpdate
  location :: Position 
  blockid :: Int32 via VarInt

data ChatMessage
  message :: Text
  timestamp :: Int64
  salt :: Int64
  signature :: Maybe ByteString
  messagecount :: Int32 via VarInt
  acknowledged :: FixedBitset 20

data ChunkBiomes
  x :: Int32
  z :: Int32
  data_ :: ChunkData

data SetPlayerPosition
  position :: V3 Double
  rotation :: V2 Float
  flags :: TeleportFlags via Bitwise Word8 TeleportFlags
  teleportid :: Int32 via VarInt

data EntityAnimation
  entityid :: Int32 via VarInt
  animation :: Word8

data AwardStatistics
  stats :: V.Vector AwardStatistics_Entry

data AwardStatistics_Entry
  categoryid :: Int32 via VarInt
  statisticid :: Int32 via VarInt
  value :: Int32 via VarInt

data AcknowledgeBlockChange
  sequence :: Int32 via VarInt

data SetBlockDestroyStage
  entityid :: Int32 via VarInt
  location :: Position
  destroystage :: Word8

data BlockEntityData
  location :: Position
  type_ :: Int32 via VarInt
  data_ :: Tg -- NBT data

data BlockAction
  location :: Position
  actionid :: Word8
  actionparam :: Word8
  blocktype :: Int32 via VarInt

data BossBar
  uuid :: UUID
  action :: BossBarAction
  -- other fields depend on action type, we'll define the action type separately

data ChangeDifficulty
  difficulty :: Word8
  locked :: Bool

data ChunkBatchFinished
  batchsize :: Int32 via VarInt

data ChunkBatchStarted

data ClearTitles
  reset :: Bool

data CommandSuggestionsResponse
  id :: Int32 via VarInt
  start :: Int32 via VarInt
  length :: Int32 via VarInt
  matches :: V.Vector CommandMatch

data CommandMatch
  match :: Text
  tooltip :: Maybe TextComponent

data Commands
  nodes :: V.Vector CommandNode  -- CommandNode type defined elsewhere
  rootindex :: Int32 via VarInt

data CloseContainer
  windowid :: Int32 via VarInt

data SetContainerContent
  windowid :: Int32 via VarInt
  stateid :: Int32 via VarInt
  slots :: V.Vector Slot  -- Slot type defined elsewhere
  carrieditem :: Slot

data SetContainerProperty
  windowid :: Int32 via VarInt
  property :: Int16
  value :: Int16

data SetContainerSlot
  windowid :: Int32 via VarInt
  stateid :: Int32 via VarInt
  slot :: Int16
  data_ :: Slot

data DisguisedChatMessage
  message :: TextComponent
  chattype :: Int32 via VarInt
  sendername :: TextComponent
  targetname :: Maybe TextComponent

data WorldEvent  
  event :: Int32
  location :: Position
  data_ :: Int32
  disablerelativevolume :: Bool

data ParticleEffect
  particleid :: Int32 via VarInt
  longdistance :: Bool
  position :: V3 Double
  offset :: V3 Float
  maxspeed :: Float
  count :: Int32
  data_ :: ParticleData -- Type defined elsewhere

data UpdateLight
  chunkx :: Int32 via VarInt
  chunkz :: Int32 via VarInt
  data_ :: LightData

|]

-- provided by "th-serde": Data.Serde.QQ
runusercoercion
  -- provided by M.Pack
  borrowderivepackunpack
  properderivepackunpack
  -- preparations for shadow types
  [ ''Generic,
    ''NFData,
    ''Eq,
    ''Ord
  ]

-- another thing. to use Bitwise, we need to derive Bitreppable
-- for the type. Bitreppable takes two type parameters: the
-- integral type to use, and the product type to represent as bits.

-- the standard way is to make a blanket instance like so:

-- lastly, we invoke Template Haskell to generate the instances

instance
  (Bits i, Integral i, Pack i, Unpack i) =>
  Bitreppable i DisplayedSkinParts
